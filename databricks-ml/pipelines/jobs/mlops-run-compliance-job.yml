#
# Template pipeline that runs compliance checks and moves model from None to Staging
#

 parameters:
  - name: variableFiles
    type: object

 jobs:
 - job: mlops_run_compliance_test
   variables: 
     - ${{ parameters.variableFiles }}
     - name: db_token_env
       ${{ if eq(variables.environment, 'dev') }}:
          value: $(dbw-edap-etl-dev)
       ${{ if eq(variables.environment, 'uat') }}:
          value: $(dbw-edap-etl-uat)
       ${{ if eq(variables.environment, 'prod') }}:
         value: $(dbw-edap-etl-prod)  
   pool:
#     name: ${{ variables.pool_name }}
     VmImage: 'ubuntu-latest'
   steps:
   - checkout: MlOps
     path: ml-ops
   
   - script: python3 $(Agent.BuildDirectory)/ml-ops/databricks-ml/cicd/cicd-scripts/execute-job.py --url ${{ variables.workspace_url }} --pat $(db_token_env) --jobid 3 --notebook ${{ variables.workspace_folder }}/tests/integration/compliance_test --clusterid  ${{ variables.cluster_id }}
     displayName: 'Running compliance tests'

 - deployment: mlops_transition_none_to_staging
   dependsOn: mlops_run_compliance_test
   condition: succeeded()
   variables: 
     - ${{ parameters.variableFiles }}
     - name: db_token_env
       ${{ if eq(variables.environment, 'dev') }}:
          value: $(dbw-edap-etl-dev)
       ${{ if eq(variables.environment, 'uat') }}:
          value: $(dbw-edap-etl-uat)
       ${{ if eq(variables.environment, 'prod') }}:
         value: $(dbw-edap-etl-prod)  
   pool:
     name: ${{ variables.pool_name }}
   environment: ${{ variables.repositoryName }}_transition_none_to_staging
   strategy:
    runOnce:
      deploy:
        steps:
        - bash: echo 'Moving model from None to Staging'
        - checkout: MlOps
          path: ml-ops
        - script: |
            python3 $(Agent.BuildDirectory)/ml-ops/databricks-ml/cicd/cicd-scripts/transition-new-model-to-staging.py \
                --url ${{ variables.workspace_url }} \
                --pat $(db_token_env) \
                --modelName ${{ variables.model_name }} \
                --modelVersion ${{ variables.model_version }}
          displayName: Transition new model version to Staging    
          
